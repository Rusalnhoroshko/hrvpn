# telegram_bot.py
import logging
import os
import decimal
import hmac
import hashlib
from datetime import datetime, timezone
from urllib.parse import urlencode
from aiohttp import web

import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from dotenv import load_dotenv
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
YOOMONEY_SECRET = os.getenv('YOOMONEY_SECRET')
YOOMONEY_WALLET = os.getenv('YOOMONEY_WALLET')
NOTIFICATION_URL = os.getenv('NOTIFICATION_URL')
DB_FILE = 'subscriptions.db'
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

from db import (
    add_user,
    get_subscriptions,
    save_subscription,
    extend_subscription,
    save_purchase_history
)
from vpn_manager import create_vpn_key_with_name, manager


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
    await add_user(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute('SELECT COUNT(*) FROM test_usage WHERE user_id = ?', (user_id,))
        row = await cursor.fetchone()
        has_used_test = row[0] > 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = [
        [InlineKeyboardButton(text="–ú–æ–∏ –∫–ª—é—á–∏", callback_data="my_keys")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                              callback_data="buy_new_key")],
        [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
    ]

    if not has_used_test:
        keyboard_buttons.insert(1, [InlineKeyboardButton(
            text="–¢–µ—Å—Ç VPN –Ω–∞ —á–∞—Å", callback_data="test_vpn")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query(F.data == "instruction")
async def handle_instruction(callback_query: types.CallbackQuery):
    instruction_text = (
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline VPN:\n\n"
        "üëâ –î–ª—è iOS: [–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å](https://apps.apple.com/us/app/outline-app/id1356177741)\n"
        "üëâ –î–ª—è Android: [–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å](https://play.google.com/store/apps/details?id=org.outline.android.client&pli=1)\n"
        "üëâ –î–ª—è MacOS: [–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å](https://apps.apple.com/us/app/outline-app/id1356177741)\n"
        "üëâ –î–ª—è Windows: [–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å](https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe)\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á.\n"
        "–ï–≥–æ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞—Ç—å '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å @hrv90\n"
    )
    await callback_query.message.answer(instruction_text, parse_mode="Markdown", disable_web_page_preview=True)


@dp.callback_query(F.data == "my_keys")
async def handle_my_keys(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    subscriptions = await get_subscriptions(user_id)
    if subscriptions:
        await callback_query.message.answer("–í–∞—à–∏ –∫–ª—é—á–∏:")
        for sub in subscriptions:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á
            await callback_query.message.answer(sub['access_url'])
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            time_left = sub['expires_at'] - datetime.now(timezone.utc)
            total_seconds_left = time_left.total_seconds()
            if total_seconds_left > 86400:
                days_left = int(total_seconds_left // 86400)
                await callback_query.message.answer(f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π")
            elif 3600 < total_seconds_left <= 86400:
                hours_left = int(total_seconds_left // 3600)
                await callback_query.message.answer(f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ {hours_left} —á–∞—Å–æ–≤")
            elif 0 < total_seconds_left <= 3600:
                minutes_left = int(total_seconds_left // 60)
                await callback_query.message.answer(f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ {minutes_left} –º–∏–Ω—É—Ç")
            else:
                await callback_query.message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription")],
                [InlineKeyboardButton(
                    text="–ö—É–ø–∏—Ç—å –µ—â–µ –∫–ª—é—á", callback_data="buy_new_key")]
            ]
        )
        await callback_query.message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                                            reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_new_key")],
            ]
        )
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=keyboard)


@dp.callback_query(F.data == "buy_new_key")
async def handle_buy_new_key(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="30 –¥–Ω–µ–π - 200 —Ä—É–±–ª–µ–π", callback_data="new_subscribe_30")],
            [InlineKeyboardButton(
                text="90 –¥–Ω–µ–π - 500 —Ä—É–±–ª–µ–π", callback_data="new_subscribe_90")],
            [InlineKeyboardButton(
                text="180 –¥–Ω–µ–π - 1000 —Ä—É–±–ª–µ–π", callback_data="new_subscribe_180")],
        ]
    )
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:", reply_markup=keyboard)


@dp.callback_query(F.data == "renew_subscription")
async def handle_renew_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    subscriptions = await get_subscriptions(user_id)
    if not subscriptions:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
    elif len(subscriptions) == 1:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        sub_id = subscriptions[0]['id']
        await choose_renewal_period(callback_query.message, sub_id)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫—É—é –ø—Ä–æ–¥–ª–∏—Ç—å
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for sub in subscriptions:
            sub_id = sub['id']
            # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∫–ª—é—á–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            key_info = sub['access_url'][-10:]
            expires_at = sub['expires_at'].strftime('%d.%m.%Y')
            button_text = f"–ö–ª—é—á {key_info}, –¥–æ {expires_at}"
            keyboard.inline_keyboard.append([InlineKeyboardButton(
                text=button_text, callback_data=f"choose_sub_{sub_id}")])
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("choose_sub_"))
async def handle_choose_subscription(callback_query: types.CallbackQuery):
    sub_id = int(callback_query.data.split("_")[2])
    await choose_renewal_period(callback_query.message, sub_id)


@dp.callback_query(F.data.startswith("new_subscribe_"))
async def process_new_subscription(callback_query: types.CallbackQuery):
    period = int(callback_query.data.split("_")[2])
    amount_mapping = {30: 200, 90: 500, 180: 1000}
    amount = amount_mapping.get(period)

    if not amount:
        await callback_query.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    user_id = callback_query.from_user.id

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π label –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    payment_label = f"{user_id}_{int(datetime.now().timestamp())}"

    # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ purchase_history –∑–¥–µ—Å—å
    # await save_purchase_history(user_id, amount, period, 'new_subscription', payment_label)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    payment_link = generate_payment_link(amount, payment_label, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period} –¥–Ω–µ–π")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π", url=payment_link)]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    await callback_query.message.answer(
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period} –¥–Ω–µ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data.startswith("renew_"))
async def process_renew_subscription(callback_query: types.CallbackQuery):
    parts = callback_query.data.split("_")
    if len(parts) != 3:
        await callback_query.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    sub_id = int(parts[1])
    period = int(parts[2])
    amount_mapping = {30: 200, 90: 500, 180: 1000}  # –¶–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö
    amount = amount_mapping.get(period)

    if not amount:
        await callback_query.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    user_id = callback_query.from_user.id

    payment_label = f"renew_{user_id}_{sub_id}_{int(datetime.now().timestamp())}"

    # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ purchase_history –∑–¥–µ—Å—å
    # await save_purchase_history(user_id, amount, period, 'renew_subscription', payment_label)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    payment_link = generate_payment_link(amount, payment_label, f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period} –¥–Ω–µ–π")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π", url=payment_link)]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    await callback_query.message.answer(
        f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period} –¥–Ω–µ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "pay_subscription")
async def handle_pay_subscription(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –µ—â–µ –∫–ª—é—á",
                                  callback_data="buy_new_key")],
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                  callback_data="renew_subscription")],
        ]
    )
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query(F.data == "test_vpn")
async def handle_test_vpn(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute('SELECT COUNT(*) FROM test_usage WHERE user_id = ?', (user_id,))
        row = await cursor.fetchone()
        has_used_test = row[0] > 0

    if has_used_test:
        await callback_query.message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    # –°–æ–∑–¥–∞—ë–º VPN-–∫–ª—é—á –Ω–∞ 1 —á–∞—Å
    vpn_key_data = await create_vpn_key_with_name(user_id)
    if vpn_key_data:
        try:
            duration_hours = 1
            duration_days = duration_hours / 24  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ –¥–Ω–∏

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
            await save_subscription(user_id, vpn_key_data, duration_days)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ test_usage
            async with aiosqlite.connect(DB_FILE) as db:
                await db.execute('INSERT INTO test_usage (user_id, used_at) VALUES (?, ?)',
                                 (user_id, datetime.now(timezone.utc).isoformat()))
                await db.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback_query.message.answer("–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á:")
            await callback_query.message.answer(vpn_key_data['accessUrl'])
            await callback_query.message.answer("–ö–ª—é—á –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.")

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            # –£–¥–∞–ª—è–µ–º –∫–ª—é—á —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                manager.delete_key(vpn_key_data['id'])
                logging.error(f"–ö–ª—é—á {vpn_key_data['id']} —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as delete_exception:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {vpn_key_data['id']}: {delete_exception}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def choose_renewal_period(message: types.Message, sub_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="30 –¥–Ω–µ–π - 200 —Ä—É–±–ª–µ–π", callback_data=f"renew_{sub_id}_30")],
            [InlineKeyboardButton(
                text="90 –¥–Ω–µ–π - 500 —Ä—É–±–ª–µ–π", callback_data=f"renew_{sub_id}_90")],
            [InlineKeyboardButton(
                text="180 –¥–Ω–µ–π - 1000 —Ä—É–±–ª–µ–π", callback_data=f"renew_{sub_id}_180")],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)


def generate_payment_link(amount, label, description):
    params = {
        'receiver': YOOMONEY_WALLET,  # –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney
        'quickpay-form': 'shop',
        'targets': description,
        'paymentType': 'AC',  # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
        'sum': amount,
        'label': label,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
        # 'successURL': SUCCESS_URL,  # URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        'formcomment': description,
        'short-dest': description,
        'comment': description,
        'need-fio': 'false',
        'need-email': 'false',
        'need-phone': 'false',
        'need-address': 'false',
        'notificationURL': NOTIFICATION_URL  # URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆMoney
    }
    payment_link = f"https://yoomoney.ru/quickpay/confirm.xml?{urlencode(params)}"
    return payment_link


async def yoomoney_notification(request):
    data = await request.post()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆMoney: {data}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_type = data.get('notification_type', '')
    operation_id = data.get('operation_id', '')
    amount = data.get('amount', '')
    currency = data.get('currency', '')
    datetime_str = data.get('datetime', '')
    sender = data.get('sender', '')
    codepro = data.get('codepro', '')
    label = data.get('label', '')
    sha1_hash = data.get('sha1_hash', '')
    withdraw_amount_str = data.get('withdraw_amount', '').replace(',', '.').strip()

    # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    params_list = [
        notification_type,
        operation_id,
        amount,
        currency,
        datetime_str,
        sender,
        codepro,
        YOOMONEY_SECRET,
        label
    ]
    params = '&'.join(params_list)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    hash_digest = hashlib.sha1(params.encode('utf-8')).hexdigest()
    if not hmac.compare_digest(hash_digest, sha1_hash):
        logging.error("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ç –ÆMoney")
        return web.Response(text='Invalid signature')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute('''
            SELECT COUNT(*) FROM purchase_history WHERE operation_id = ?
        ''', (operation_id,))
        row = await cursor.fetchone()
        if row[0] > 0:
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å operation_id {operation_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            return web.Response(text='OK')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK, —á—Ç–æ–±—ã –ÆMoney –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    # –ü–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    if not label:
        logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
        return web.Response(text='Invalid label')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º withdraw_amount_str –≤ Decimal
    try:
        paid_amount = decimal.Decimal(withdraw_amount_str)
        paid_amount = paid_amount.quantize(decimal.Decimal('1.00'))  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    except decimal.InvalidOperation:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ withdraw_amount: {withdraw_amount_str}")
        return web.Response(text='Invalid withdraw_amount')

    logging.info(f"paid_amount: {paid_amount}")

    # –û–±–Ω–æ–≤–ª—è–µ–º amount_mapping —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Decimal
    amount_mapping = {
        # decimal.Decimal('5.00'): 5,
        decimal.Decimal('200.00'): 30,
        decimal.Decimal('500.00'): 90,
        decimal.Decimal('1000.00'): 180
    }

    matching_amount = None
    for amt in amount_mapping:
        difference = abs(paid_amount - amt)
        logging.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ paid_amount: {paid_amount} –∏ amt: {amt}, —Ä–∞–∑–Ω–∏—Ü–∞: {difference}")
        if difference <= decimal.Decimal('0.01'):
            matching_amount = amt
            break

    logging.info(f"matching_amount: {matching_amount}")

    if not matching_amount:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è paid_amount: {paid_amount}")
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å user_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if label.startswith('renew_') or label.startswith('new_subscribe_'):
            parts = label.split('_')
            if len(parts) >= 2:
                user_id_str = parts[1]
                if user_id_str.isdigit():
                    user_id = int(user_id_str)
                    await bot.send_message(user_id, "–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.")
        return web.Response(text='Invalid amount')

    expected_period = amount_mapping[matching_amount]

    if label.startswith('renew_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        parts = label.split('_')
        if len(parts) < 4:
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç label –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {label}")
            return web.Response(text='Invalid label format for renew')

        _, user_id_str, sub_id_str, _ = parts
        if not user_id_str.isdigit() or not sub_id_str.isdigit():
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ label: {label}")
            return web.Response(text='Invalid user or sub ID in label')

        user_id = int(user_id_str)
        sub_id = int(sub_id_str)

        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await extend_subscription(user_id, sub_id, expected_period)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–∫–∏ —Å operation_id
        await save_purchase_history(user_id, float(matching_amount), expected_period, 'renew_subscription', label,
                                    operation_id)
        await bot.send_message(user_id, f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {expected_period} –¥–Ω–µ–π.")
        return web.Response(text='OK')

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        parts = label.split('_')
        if len(parts) < 2:
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç label –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {label}")
            return web.Response(text='Invalid label format for new subscription')

        user_id_str = parts[0]
        if not user_id_str.isdigit():
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –≤ label: {label}")
            return web.Response(text='Invalid user ID in label')

        user_id = int(user_id_str)

        # –°–æ–∑–¥–∞–µ–º VPN-–∫–ª—é—á –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        vpn_key_data = await create_vpn_key_with_name(user_id)
        if vpn_key_data:
            await save_subscription(user_id, vpn_key_data, expected_period)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–∫–∏ —Å operation_id
            await save_purchase_history(user_id, float(matching_amount), expected_period, 'new_subscription', label,
                                        operation_id)
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")]
                ]
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.send_message(user_id, f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à –∫–ª—é—á:")
            await bot.send_message(user_id, f"{vpn_key_data['accessUrl']}", reply_markup=keyboard)
            return web.Response(text='OK')
        else:
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∫–ª—é—á–∞.")
            return web.Response(text='Error creating VPN key')
